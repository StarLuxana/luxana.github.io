{"title":"正则表达式必知必会","uid":"4b14249281608a1ca0cb2d884dbaa0d8","slug":"book_note_1","date":"2023-01-01T06:22:00.000Z","updated":"2023-01-01T06:24:07.931Z","comments":true,"path":"api/articles/book_note_1.json","keywords":null,"cover":null,"content":"<h1 id=\"正则表达式入门\"><a href=\"#正则表达式入门\" class=\"headerlink\" title=\"正则表达式入门\"></a>正则表达式入门</h1><h2 id=\"什么是正则表达式\"><a href=\"#什么是正则表达式\" class=\"headerlink\" title=\"什么是正则表达式\"></a>什么是正则表达式</h2><ul>\n<li>正则表达式是一些用来匹配和处理文字的字符串。</li>\n<li>正则表达式是用正则表达式语言创建的。</li>\n<li>正则表达式语言并不是一种完备的程序设计语言，而是内置于其他语言或软件产品里的“迷你”语言。</li>\n</ul>\n<h2 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h2><ul>\n<li>并非所有的正则表达式实现都是一样的。在不同的应用程序/语言里，正则表达式的语法和功能往往会有明显的差异</li>\n</ul>\n<h1 id=\"匹配单个字符\"><a href=\"#匹配单个字符\" class=\"headerlink\" title=\"匹配单个字符\"></a>匹配单个字符</h1><h2 id=\"匹配普通文本\"><a href=\"#匹配普通文本\" class=\"headerlink\" title=\"匹配普通文本\"></a>匹配普通文本</h2><p>正则表达式可以包含普通文本，以普通文本为正则表达式可以搜索到文本中所有包含普通文本的部分。</p>\n<p>绝大多数正则表达式引擎的默认行为是只返回第一个匹配结果，而非返回全部匹配结果。</p>\n<p>如果要找出所有匹配结果，则应选择全局搜索。</p>\n<p>正则表达式是区分字母大小写的。</p>\n<p>如果要找出不区分大小写的匹配普通文本，可以选择强制执行不区分大小写的搜索。</p>\n<h2 id=\"匹配任意字符\"><a href=\"#匹配任意字符\" class=\"headerlink\" title=\"匹配任意字符\"></a>匹配任意字符</h2><p>在正则表达式里，特殊字符（或字符集合）用来标识要搜索的东西。</p>\n<p>.字符（英文句号）可以匹配任意单个字符</p>\n<p>在同一个正则表达式里允许使用多个.字符，它们既可以共同出现，也可以出现在模式的不同位置</p>\n<p>模式：实际的正则表达式</p>\n<h2 id=\"匹配特殊字符\"><a href=\"#匹配特殊字符\" class=\"headerlink\" title=\"匹配特殊字符\"></a>匹配特殊字符</h2><p>.字符在正则表达式里有着特殊的意义。如果模式里需要一个.字符本身而不是它在正则表达式里的特殊含义，必须在.的前面加上一个\\（反斜杠）字符来对它进行转义。</p>\n<p>\\是一个元字符。</p>\n<p>元字符：字符有特殊含义，代表的不是字符本身。</p>\n<p>如果需要搜索\\本身，就必须对\\字符进行转义。相应的转义序列是两个连续的反斜杠<span>\\</span>。</p>\n<h1 id=\"匹配一组字符\"><a href=\"#匹配一组字符\" class=\"headerlink\" title=\"匹配一组字符\"></a>匹配一组字符</h1><h2 id=\"匹配多个字符中的某一个\"><a href=\"#匹配多个字符中的某一个\" class=\"headerlink\" title=\"匹配多个字符中的某一个\"></a>匹配多个字符中的某一个</h2><p>在正则表达式里，我们可以使用元字符[]来定义一个字符集合。在使用[]定义的字符集合里，出现在[]之间的所有字符都是该集合的组成部分，必须匹配其中某个成员（但并非全部）。</p>\n<h2 id=\"利用字符集合区间\"><a href=\"#利用字符集合区间\" class=\"headerlink\" title=\"利用字符集合区间\"></a>利用字符集合区间</h2><p>正则表达式提供了一个特殊的元字符：可以用-（连字符·）来定义字符区间(0<del>9、A</del>Z等)。</p>\n<ul>\n<li>A-Z：所有大写字母</li>\n<li>a-z：所有小写字母</li>\n<li>A-F：从A到F的所有大写字母</li>\n<li>A-z：ASCII字符A到ASCII字符z的所有字母，除了大小写字母外还包括^和[]等字符</li>\n</ul>\n<p>-（连字符）是一个特殊的连字符，它只有出现在[]之间的时候才是元字符。字符集合以外的地方，-只是一个普通字符，不需要被转义。</p>\n<h2 id=\"排除\"><a href=\"#排除\" class=\"headerlink\" title=\"排除\"></a>排除</h2><p>可以使用元字符^来排除某个字符集合。</p>\n<h1 id=\"使用元字符\"><a href=\"#使用元字符\" class=\"headerlink\" title=\"使用元字符\"></a>使用元字符</h1><h2 id=\"再谈转义\"><a href=\"#再谈转义\" class=\"headerlink\" title=\"再谈转义\"></a>再谈转义</h2><p>因为元字符在正则表达式里有着特殊的含义，所以这些字符就无法用来代表它们本身。</p>\n<p>配对的元字符不用作元字符时必须被转义，否则正则表达式解析器可能会抛出一个错误。</p>\n<h2 id=\"匹配空白字符\"><a href=\"#匹配空白字符\" class=\"headerlink\" title=\"匹配空白字符\"></a>匹配空白字符</h2><p>在进行正则表达式搜索的时候，我们经常会需要匹配文本中的非打印空白字符。</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[\\b]</td>\n<td>回退（并删除）一个字符（Backspace）</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车符</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符（Tab）</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表符</td>\n</tr>\n</tbody></table>\n<p>\\n\\r是Windows系统所使用的文本行结束标记。而Unix/Linux系统以及Mac OS只使用了一个换行符。换句话说，在这些系统上匹配空白行只使用\\n即可，不需要加上\\r。</p>\n<h2 id=\"匹配特定的字符类型\"><a href=\"#匹配特定的字符类型\" class=\"headerlink\" title=\"匹配特定的字符类型\"></a>匹配特定的字符类型</h2><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\d</td>\n<td>任何一个数字字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>任何一个非数字字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>任何一个字母数字字符或下划线字符</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>任何一个非字母数字字符或非下划线字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>任何一个空白字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>任何一个非空白字符</td>\n</tr>\n<tr>\n<td>\\x</td>\n<td>十六进制值</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>八进制值</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用POSIX字符类\"><a href=\"#使用POSIX字符类\" class=\"headerlink\" title=\"使用POSIX字符类\"></a>使用POSIX字符类</h2><table>\n<thead>\n<tr>\n<th>字符类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[:alnum:]</td>\n<td>任何一个数字或字母</td>\n</tr>\n<tr>\n<td>[:alpha:]</td>\n<td>任何一个字母</td>\n</tr>\n<tr>\n<td>[:blank:]</td>\n<td>空格或制表符</td>\n</tr>\n<tr>\n<td>[:cntrl:]</td>\n<td>ASCII控制字符</td>\n</tr>\n<tr>\n<td>[:digit:]</td>\n<td>任何一个数字</td>\n</tr>\n<tr>\n<td>[:graph:]</td>\n<td>任何一个可打印字符，但不包括空格</td>\n</tr>\n<tr>\n<td>[:lower:]</td>\n<td>任何一个小写字母</td>\n</tr>\n<tr>\n<td>[:print:]</td>\n<td>任何一个可打印字符</td>\n</tr>\n<tr>\n<td>[:punct:]</td>\n<td>既不属于[:alnum:]也不属于[:cntrl:]的任何一个字符</td>\n</tr>\n<tr>\n<td>[:space:]</td>\n<td>任何一个空白字符，包括空格</td>\n</tr>\n<tr>\n<td>[:upper:]</td>\n<td>任何一个大写字母</td>\n</tr>\n<tr>\n<td>[:xdigit:]</td>\n<td>任何一个十六进制数字</td>\n</tr>\n</tbody></table>\n<p>JavaScript不支持在正则表达式里使用POSIX字符类</p>\n<h1 id=\"重复匹配\"><a href=\"#重复匹配\" class=\"headerlink\" title=\"重复匹配\"></a>重复匹配</h1><h2 id=\"有多少个匹配\"><a href=\"#有多少个匹配\" class=\"headerlink\" title=\"有多少个匹配\"></a>有多少个匹配</h2><p>要想匹配某个字符（或字符集合）的一次或多次重复，只要简单地在其后面加上一个+字符就行了。</p>\n<p>给一个字符集合加上+后缀的时候，必须把+放在这个字符集合的外面。</p>\n<p>当在字符集合里使用的时候，元字符将被解释为普通字符，不需要转义，但转义了也没有坏处。</p>\n<p>只要把*字符放在某个字符（或字符集合）的后面，就可以匹配该字符（或字符集合）出现零次或多次的情况。</p>\n<p>?字符能够匹配某个字符（或字符集合）的零次或一次出现，最多不超过一次。</p>\n<p>把一个字符也定义成一个集合可以增加可读性和避免·产生误解。</p>\n<h2 id=\"匹配的重复次数\"><a href=\"#匹配的重复次数\" class=\"headerlink\" title=\"匹配的重复次数\"></a>匹配的重复次数</h2><p>要想设置具体的匹配次数，把数字写在{}之间即可。</p>\n<p>{}语法还可以用来为重复匹配次数设定一个区间范围，也就是匹配的最小次数和最大次数，中间用,间隔，即{最小次数,最大次数}。</p>\n<p>为避免不必要的麻烦，在需要匹配/字符本身的时候，最好总是使用它的转义序列。</p>\n<p>区间范围语法可以省略最大值部分，指定至少要匹配多少次，即{最小次数,}。</p>\n<h2 id=\"防止过度匹配\"><a href=\"#防止过度匹配\" class=\"headerlink\" title=\"防止过度匹配\"></a>防止过度匹配</h2><p>*和+都是所谓的”贪婪型”元字符，其匹配行为是多多益善而不是适可而止。它们会尽可能地从一段文本地开头一直匹配到末尾，而不是碰到第一个匹配时就停止。这是有意设计的，量词就是贪婪的。</p>\n<p>量词：+、*和？</p>\n<p>在不需要这种”贪婪行为”的时候应该使用这些量词的”懒惰型”版本。懒惰型量词的写法是在贪婪型量词后面加上一个?。</p>\n<table>\n<thead>\n<tr>\n<th>贪婪型量词</th>\n<th>懒惰型量词</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>*？</td>\n</tr>\n<tr>\n<td>+</td>\n<td>+？</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>{n,}?</td>\n</tr>\n</tbody></table>\n<h1 id=\"位置匹配\"><a href=\"#位置匹配\" class=\"headerlink\" title=\"位置匹配\"></a>位置匹配</h1><h2 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h2><p>一些用于指定模式前后位置（或边界）的特殊元字符</p>\n<h2 id=\"单词边界\"><a href=\"#单词边界\" class=\"headerlink\" title=\"单词边界\"></a>单词边界</h2><p>\\b用来匹配一个单词的开头或结尾。</p>\n<p>\\b匹配的是字符之间的一个位置：一边是单词（\\w），另一边是其他内容（\\W）。</p>\n<p>\\B匹配的是字符之间的一个位置：两边都是单词（\\w），或两边都是其他内容（\\W）</p>\n<h2 id=\"字符串边界\"><a href=\"#字符串边界\" class=\"headerlink\" title=\"字符串边界\"></a>字符串边界</h2><p>字符串边界可以用来对字符串位置进行匹配，只不过用在字符串首尾进行模式匹配。字符串边界元字符有两个：^代表字符串开头，$代表字符串结尾。</p>\n<p>有些元字符拥有多种用途，^就是其中之一。只有当它出现在字符集合里且紧跟在左方括号的后面时，它才表示排除该字符集合。如果出现在字符集合之外并位于模式的开头，^将匹配字符串的起始位置。</p>\n<p>许多正则表达式都支持使用一些特殊的元字符去改变另外一些元字符的行为，(？m)就是其中之一，它可用于启动多行模式。多行模式迫使正则表达式引擎将换行符视为字符串分隔符，这样一来^既可以匹配字符串开头，也可以匹配换行符之后的起始位置；$不仅能匹配字符串结尾，还能匹配换行符之后的结束位置。</p>\n<p>在使用时，(？m)必须出现在整个模式的最前面。</p>\n<p>包括JavaScript在内的许多正则表达式实现都不支持(？m)。</p>\n<h1 id=\"使用子表达式\"><a href=\"#使用子表达式\" class=\"headerlink\" title=\"使用子表达式\"></a>使用子表达式</h1><h2 id=\"理解子表达式\"><a href=\"#理解子表达式\" class=\"headerlink\" title=\"理解子表达式\"></a>理解子表达式</h2><p>用来表明重复次数的元字符只作用于紧挨着它的前一个字符或元字符。</p>\n<h2 id=\"使用子表达式进行分组\"><a href=\"#使用子表达式进行分组\" class=\"headerlink\" title=\"使用子表达式进行分组\"></a>使用子表达式进行分组</h2><p>子表达式是更长的表达式的一部分。划分子表达式的目的是为了将其视为单一的实体来使用。子表达式必须出现在()之间。</p>\n<p>把表达式的某些部分加上括号，形成子表达式，以此提高可读性。</p>\n<p>|是OR（或）操作符，它可以匹配前一个字符串或后一个字符串。</p>\n<h2 id=\"子表达式的嵌套\"><a href=\"#子表达式的嵌套\" class=\"headerlink\" title=\"子表达式的嵌套\"></a>子表达式的嵌套</h2><p>子表达式可以多重嵌套。</p>\n<p>模式是从左到右进行评估的，所以当有多个表达式都可以匹配时，首先测试第一个，然后测试第二个，以此类推。只要有任何模式匹配，就不再测试选择结构中的其他模式。</p>\n<h1 id=\"反向引用\"><a href=\"#反向引用\" class=\"headerlink\" title=\"反向引用\"></a>反向引用</h1><h2 id=\"反向引用匹配\"><a href=\"#反向引用匹配\" class=\"headerlink\" title=\"反向引用匹配\"></a>反向引用匹配</h2><p>反向引用：这些实体引用的是先前的表达式。</p>\n<p>\\1匹配模式中所使用的第一个子表达式，\\2匹配模式中所使用的第二个子表达式，以此类推。</p>\n<p>在不同的正则表达式实现中，反向引用的语法差异不小。</p>\n<p>反向引用只能用来引用括号里的子表达式。</p>\n<p>\\0可以用来代表整个正则表达式。</p>\n<p>移动或编辑子表达式可能会使模式失效，删除或添加子表达式的后果甚至会更严重。</p>\n<h2 id=\"替换操作\"><a href=\"#替换操作\" class=\"headerlink\" title=\"替换操作\"></a>替换操作</h2><p>替换操作需要用到两个正则表达式：一个用来指定搜索模式，另一个用来指定替换模式。反向引用可以跨模式使用，在第一个模式里匹配的子表达式可以用在第二个模式里。</p>\n<p>有些正则表达式实现允许我们使用元字符对字母进行大小写转换。</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\E</td>\n<td>结束\\L或\\U转换</td>\n</tr>\n<tr>\n<td>\\l</td>\n<td>把下一个字符转换成小写</td>\n</tr>\n<tr>\n<td>\\L</td>\n<td>把\\L到\\E之间的全部字符转换成小写</td>\n</tr>\n<tr>\n<td>\\u</td>\n<td>把下一个字符转换成大写</td>\n</tr>\n<tr>\n<td>\\U</td>\n<td>把\\U到\\E之间的全部字符转换成大写</td>\n</tr>\n</tbody></table>\n<h1 id=\"环视\"><a href=\"#环视\" class=\"headerlink\" title=\"环视\"></a>环视</h1><h2 id=\"环视简介\"><a href=\"#环视简介\" class=\"headerlink\" title=\"环视简介\"></a>环视简介</h2><p>环视：一些不用被返回的匹配——这些匹配是为了找出正确的匹配位置，其本身不属于最终的匹配结果。</p>\n<h2 id=\"向前查看\"><a href=\"#向前查看\" class=\"headerlink\" title=\"向前查看\"></a>向前查看</h2><p>向前查看指定了一个必须匹配但不用在结果中返回的模式。</p>\n<p>向前查看模式的语法是一个以?=开头的子表达式，需要匹配的文本跟在=后面.</p>\n<h2 id=\"向后查看\"><a href=\"#向后查看\" class=\"headerlink\" title=\"向后查看\"></a>向后查看</h2><p>除了向前查看，许多正则表达式实现还支持向后查看，也就是查看出现在以匹配的文本之前的内容，向后查看操作符是?&lt;=。</p>\n<p>?&lt;=的用法与?=一样。它必须出现在一个子表达式里，后面跟随要匹配的文本。</p>\n<p>向前查看模式的长度是可变的，其中可以包含量词，所以非常灵活</p>\n<p>向后查看模式则只能是固定长度。几乎所有的正则表达式实现都有此限制</p>\n<h2 id=\"否定式环视\"><a href=\"#否定式环视\" class=\"headerlink\" title=\"否定式环视\"></a>否定式环视</h2><p>向前查看和向后查看通常都是用来匹配文本，主要用于指定作为匹配结果返回的文本位置。这种用法被称作肯定式向前查看和肯定式向后查看。</p>\n<p>环视还有一种不太常见的形式叫作否定式环视。否定式环视向前查看会向前查看不匹配指定模式的文本，否定式向后查看则向后查看不匹配指定模式的文本。</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(?=)</td>\n<td>肯定式向前查看</td>\n</tr>\n<tr>\n<td>(?!)</td>\n<td>否定式向前查看</td>\n</tr>\n<tr>\n<td>(?&lt;=)</td>\n<td>肯定式向后查看</td>\n</tr>\n<tr>\n<td>(?&lt;!)</td>\n<td>否定式向后查看</td>\n</tr>\n</tbody></table>\n<h1 id=\"嵌入式条件\"><a href=\"#嵌入式条件\" class=\"headerlink\" title=\"嵌入式条件\"></a>嵌入式条件</h1><h2 id=\"正则表达式里的条件\"><a href=\"#正则表达式里的条件\" class=\"headerlink\" title=\"正则表达式里的条件\"></a>正则表达式里的条件</h2><p>反向引用条件仅在一个前面的子表达式得以匹配的情况下才允许使用另一个表达式。</p>\n<p>用来定义这种条件的语法是(?(反向引用)表达式)，其中?表明这是一个条件，括号里是一个反向引用，仅当反向引用立即出现时，才对表达式求值。</p>\n<p>条件还可以有else表达式，仅当给定的反向引用不存在时才执行该表达式，用来定义这种条件的语法是(?(反向引用)表达式|表达式)。此语法接受一个条件和两个分别在符合/不符合该条件时执行的表达式。</p>\n","text":"正则表达式入门什么是正则表达式 正则表达式是一些用来匹配和处理文字的字符串。 正则表达式是用正则表达式语言创建的。 正则表达式语言并不是一种完备的程序设计语言，而是内置于其他语言或软件产品里的“迷你”语言。 使用正则表达式 并非所有的正则表达式实现都是一样的。在不同的应用程序/语...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"读书笔记","slug":"读书笔记","count":1,"path":"api/tags/读书笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">正则表达式入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">什么是正则表达式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">使用正则表达式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">匹配单个字符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E6%99%AE%E9%80%9A%E6%96%87%E6%9C%AC\"><span class=\"toc-text\">匹配普通文本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E4%BB%BB%E6%84%8F%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">匹配任意字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">匹配特殊字符</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E4%B8%80%E7%BB%84%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">匹配一组字符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E5%A4%9A%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA\"><span class=\"toc-text\">匹配多个字符中的某一个</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86%E5%90%88%E5%8C%BA%E9%97%B4\"><span class=\"toc-text\">利用字符集合区间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E9%99%A4\"><span class=\"toc-text\">排除</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%85%83%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">使用元字符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%8D%E8%B0%88%E8%BD%AC%E4%B9%89\"><span class=\"toc-text\">再谈转义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">匹配空白字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E7%89%B9%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">匹配特定的字符类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8POSIX%E5%AD%97%E7%AC%A6%E7%B1%BB\"><span class=\"toc-text\">使用POSIX字符类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%A4%8D%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">重复匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">有多少个匹配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E7%9A%84%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0\"><span class=\"toc-text\">匹配的重复次数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%B2%E6%AD%A2%E8%BF%87%E5%BA%A6%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">防止过度匹配</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E7%BD%AE%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">位置匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%B9%E7%95%8C\"><span class=\"toc-text\">边界</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%AF%8D%E8%BE%B9%E7%95%8C\"><span class=\"toc-text\">单词边界</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%B9%E7%95%8C\"><span class=\"toc-text\">字符串边界</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">使用子表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%A7%A3%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">理解子表达式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84\"><span class=\"toc-text\">使用子表达式进行分组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">子表达式的嵌套</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">反向引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">反向引用匹配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">替换操作</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E8%A7%86\"><span class=\"toc-text\">环视</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E8%A7%86%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">环视简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%91%E5%89%8D%E6%9F%A5%E7%9C%8B\"><span class=\"toc-text\">向前查看</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%91%E5%90%8E%E6%9F%A5%E7%9C%8B\"><span class=\"toc-text\">向后查看</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%A6%E5%AE%9A%E5%BC%8F%E7%8E%AF%E8%A7%86\"><span class=\"toc-text\">否定式环视</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">嵌入式条件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%87%8C%E7%9A%84%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">正则表达式里的条件</span></a></li></ol></li></ol>","author":{"name":"Luxana","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/64762749?s=400&u=7ec05d50872d7183db467baa588b8f3903a17b4c&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{}}